name: App-Services Deployment

on:
  push:
    branches: [prod]
  workflow_dispatch:
    inputs:
      deploy_api_gateway:
        type: boolean
        default: false
      deploy_apartment_app_service:
        type: boolean
        default: false
      deploy_homeowner_app_service:
        type: boolean
        default: false
      deploy_marketplace_app_service:
        type: boolean
        default: false
      deploy_smallbiz_app_service:
        type: boolean
        default: false


jobs:
  deploy:
    runs-on: ubuntu-latest    

    env:
      CLUSTER_NAME: Aptster_App_Cluster
      ALB_NAME: Aptster-App-Service-ALB
      SUBNETS_ALB: "subnet-0462023b9784d4659 subnet-01702212606ed5a47"
      SUBNETS_ECS: "subnet-0462023b9784d4659,subnet-01702212606ed5a47"
      SECURITY_GROUPS: sg-0179fcf3989033adf
      SECURITY_GROUPS_ECS: "sg-0179fcf3989033adf"
      VPC_ID: vpc-08a881aa22ede5f42      
      PORT_API_GATEWAY: 4080
      PORT_APARTMENT_APP_SERVICE: 5082
      PORT_HOMEOWNER_APP_SERVICE: 5080
      PORT_MARKETPLACE_APP_SERVICE: 5083
      PORT_SMALLBIZ_APP_SERVICE: 5081
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    - name: Github Workspace
      run: echo ${{ github.workspace }}

    - name: Confirm git commit SHA output
      run: echo ${{ env.COMMIT_SHORT_SHA }}

    # TEST + BUILD ONLY SELECTED SERVICES
    - name: Test & build selected services
      run: |
        if [ "${{ inputs.deploy_api_gateway }}" == "true" ]; then
          cd api-gateway && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_apartment_app_service }}" == "true" ]; then
          cd app-services/apartment-app-service && mvn test && mvn package -DskipTests && cd ../../..
        fi
        if [ "${{ inputs.deploy_homeowner_app_service }}" == "true" ]; then
          cd app-services/homeowner-app-service && mvn test && mvn package -DskipTests && cd ../../..
        fi
        if [ "${{ inputs.deploy_marketplace_app_service }}" == "true" ]; then
          cd app-services/marketplace-app-service && mvn test && mvn package -DskipTests && cd ../../..
        fi
        if [ "${{ inputs.deploy_smallbiz_app_service }}" == "true" ]; then
          cd app-services/smallbiz-app-service && mvn test && mvn package -DskipTests && cd ../../..
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{secrets.AWS_REGION}}


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
          
    - name: Build and Push Docker Images
      run: |  
        build_push() {
          local SERVICE=$1
          local SERVICE_PATH=$2
          docker build -t ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} $SERVICE_PATH
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }}
          docker tag ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest        
        }

        if [ "${{ inputs.deploy_api_gateway }}" == "true" ]; then
          build_push api-gateway api-gateway
        fi
        if [ "${{ inputs.deploy_apartment_app_service }}" == "true" ]; then
          build_push apartment-app-service app-services/apartment-app-service
        fi
        if [ "${{ inputs.deploy_homeowner_app_service }}" == "true" ]; then
          build_push homeowner-app-service app-services/homeowner-app-service
        fi
        if [ "${{ inputs.deploy_marketplace_app_service }}" == "true" ]; then
          build_push marketplace-app-service app-services/marketplace-app-service
        fi
        if [ "${{ inputs.deploy_smallbiz_app_service }}" == "true" ]; then
          build_push smallbiz-app-service app-services/smallbiz-app-service
        fi


    - name: Create ECS cluster if not exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --region ${{secrets.AWS_REGION}} --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")
        
        if [ "$CLUSTER_EXISTS" = "MISSING" ] || [ "$CLUSTER_EXISTS" = "INACTIVE" ] || [ "$CLUSTER_EXISTS" = "None" ]; then
          echo "$CLUSTER_NAME Cluster not found. Creating $CLUSTER_NAME ECS cluster..."
          aws ecs create-cluster --cluster-name $CLUSTER_NAME --region ${{secrets.AWS_REGION}}
        else
          echo "ECS cluster '$CLUSTER_NAME' already exists."
        fi

    - name: Create ALB
      run: |
        ALB_ARN=$(aws elbv2 describe-load-balancers --names $ALB_NAME --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "MISSING")
        if [ "$ALB_ARN" = "MISSING" ]; then
          echo "Creating ALB..."
          ALB_ARN=$(aws elbv2 create-load-balancer --name $ALB_NAME \
            --subnets ${SUBNETS_ALB} --security-groups ${SECURITY_GROUPS} \
            --scheme internet-facing --type application \
            --query 'LoadBalancers[0].LoadBalancerArn' --output text)
        fi
        echo "ALB ARN: $ALB_ARN"
        echo "ALB_ARN=$ALB_ARN" >> $GITHUB_ENV

    - name: Create Target Groups
      run: |
        create_tg() {
          TG_NAME=$1
          TG_PORT=$2
          TG_ENV_NAME=$3
          TG_ARN=$(aws elbv2 describe-target-groups --names $TG_NAME --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "MISSING")
          if [ "$TG_ARN" = "MISSING" ]; then
            TG_ARN=$(aws elbv2 create-target-group --name $TG_NAME \
              --protocol HTTP --port $TG_PORT \
              --vpc-id ${VPC_ID} --target-type ip \
              --query 'TargetGroups[0].TargetGroupArn' --output text)
          fi
          echo "$TG_NAME ARN: $TG_ARN"
          echo "$TG_ENV_NAME=$TG_ARN" >> $GITHUB_ENV
        }
      
        create_tg TG-api-gateway $PORT_API_GATEWAY TG_API_GATEWAY
        create_tg TG-apartment-app-service $PORT_APARTMENT_APP_SERVICE TG_APARTMENT_APP_SERVICE
        create_tg TG-homeowner-app-service $PORT_HOMEOWNER_APP_SERVICE TG_HOMEOWNER_APP_SERVICE
        create_tg TG-marketplace-app-service $PORT_MARKETPLACE_APP_SERVICE TG_MARKETPLACE_APP_SERVICE
        create_tg TG-smallbiz-app-service $PORT_SMALLBIZ_APP_SERVICE TG_SMALLBIZ_APP_SERVICE

    - name: Create ALB Listener
      run: |
        LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query 'Listeners[?Port==`80`].ListenerArn' --output text)
        if [ -z "$LISTENER_ARN" ]; then
          LISTENER_ARN=$(aws elbv2 create-listener --load-balancer-arn $ALB_ARN \
            --protocol HTTP --port 80 \
            --default-actions Type=forward,TargetGroupArn=${{ env.TG_API_GATEWAY }} \
            --query 'Listeners[0].ListenerArn' --output text)
        fi
        echo "LISTENER_ARN=$LISTENER_ARN" >> $GITHUB_ENV

    - name: Add ALB Listener Rules
      run: |
        add_rule() {
          PATH_PATTERN=$1
          TG_ARN=$2
          PRIORITY=$3
          aws elbv2 create-rule --listener-arn ${{ env.LISTENER_ARN }} \
            --priority $PRIORITY \
            --conditions Field=path-pattern,Values="$PATH_PATTERN" \
            --actions Type=forward,TargetGroupArn=$TG_ARN
        }
        
        add_rule "/api-gateway/*" ${{ env.TG_API_GATEWAY }} 5
        add_rule "/apartment-app-service/*" ${{ env.TG_APARTMENT_APP_SERVICE }} 10
        add_rule "/homeowner-app-service/*" ${{ env.TG_HOMEOWNER_APP_SERVICE }} 15
        add_rule "/marketplace-app-service/*" ${{ env.TG_MARKETPLACE_APP_SERVICE }} 20
        add_rule "/smallbiz-app-service/*" ${{ env.TG_SMALLBIZ_APP_SERVICE }} 25
        
    - name: Deploy Services
      run: |
        deploy_service() {
          local SERVICE_NAME=$1
          local TASK_NAME=$2
          local IMAGE=$3
          local DEF_FILE=$4
          local TG_ARN=$5
          local CONTAINER_NAME=$6
          local CONTAINER_PORT=$7

          echo "Deploying $SERVICE_NAME using image $IMAGE"

          sed "s|REPLACE_ME|$IMAGE|g" ecs-task-definitions/$DEF_FILE > final-task-def.json
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          OLD_REVISIONS=$(aws ecs list-task-definitions --family-prefix $TASK_NAME --status ACTIVE --sort DESC --query 'taskDefinitionArns[1:]' --output text)
          for TD_ARN in $OLD_REVISIONS; do
            aws ecs deregister-task-definition --task-definition $TD_ARN
          done
          
          SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].status" --output text 2>/dev/null || echo "MISSING")

          if [ "$SERVICE_STATUS" == "MISSING" ] || [ "$SERVICE_STATUS" == "None" ]; then
            echo "Creating ECS service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${SUBNETS_ECS}],securityGroups=[${SECURITY_GROUPS_ECS}],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=$TG_ARN,containerName=$CONTAINER_NAME,containerPort=$CONTAINER_PORT"
          else
            echo "Updating ECS service..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $TASK_DEF_ARN \
              --force-new-deployment
          fi
        }

        if [ "${{ inputs.deploy_api_gateway }}" == "true" ]; then
          deploy_service api-gateway-service api-gateway-task-family ${{ secrets.ECR_REGISTRY }}/api-gateway:${{ env.COMMIT_SHORT_SHA }} api-gateway-td.json ${{ env.TG_API_GATEWAY }} api-gateway-container $PORT_API_GATEWAY
        fi
        if [ "${{ inputs.deploy_apartment_app_service }}" == "true" ]; then
          deploy_service app-apartment-app-service apartment-app-service-task-family ${{ secrets.ECR_REGISTRY }}/apartment-app-service:${{ env.COMMIT_SHORT_SHA }} apartment-app-service-td.json ${{ env.TG_APARTMENT_APP_SERVICE }} apartment-app-service-container $PORT_APARTMENT_APP_SERVICE
        fi
        if [ "${{ inputs.deploy_homeowner_app_service }}" == "true" ]; then
          deploy_service app-homeowner-app-service homeowner-app-service-task-family ${{ secrets.ECR_REGISTRY }}/homeowner-app-service:${{ env.COMMIT_SHORT_SHA }} homeowner-app-service-td.json ${{ env.TG_HOMEOWNER_APP_SERVICE }} homeowner-app-service-container $PORT_HOMEOWNER_APP_SERVICE
        fi
        if [ "${{ inputs.deploy_marketplace_app_service }}" == "true" ]; then
          deploy_service app-marketplace-app-service marketplace-app-service-task-family ${{ secrets.ECR_REGISTRY }}/marketplace-app-service:${{ env.COMMIT_SHORT_SHA }} marketplace-app-service-td.json ${{ env.TG_MARKETPLACE_APP_SERVICE }} marketplace-app-service-container $PORT_MARKETPLACE_APP_SERVICE
        fi
        if [ "${{ inputs.deploy_smallbiz_app_service }}" == "true" ]; then
          deploy_service app-smallbiz-app-service smallbiz-app-service-task-family ${{ secrets.ECR_REGISTRY }}/smallbiz-app-service:${{ env.COMMIT_SHORT_SHA }} smallbiz-app-service-td.json ${{ env.TG_SMALLBIZ_APP_SERVICE }} smallbiz-app-service-container $PORT_SMALLBIZ_APP_SERVICE
        fi        
